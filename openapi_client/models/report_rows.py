# coding: utf-8

"""
    Accounting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: api@xero.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ReportRows(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'row_type': 'RowType',
        'title': 'str',
        'cells': 'list[ReportCell]',
        'rows': 'list[ReportRow]'
    }

    attribute_map = {
        'row_type': 'RowType',
        'title': 'Title',
        'cells': 'Cells',
        'rows': 'Rows'
    }

    def __init__(self, row_type=None, title=None, cells=None, rows=None):  # noqa: E501
        """ReportRows - a model defined in OpenAPI"""  # noqa: E501

        self._row_type = None
        self._title = None
        self._cells = None
        self._rows = None
        self.discriminator = None

        if row_type is not None:
            self.row_type = row_type
        if title is not None:
            self.title = title
        if cells is not None:
            self.cells = cells
        if rows is not None:
            self.rows = rows

    @property
    def row_type(self):
        """Gets the row_type of this ReportRows.  # noqa: E501


        :return: The row_type of this ReportRows.  # noqa: E501
        :rtype: RowType
        """
        return self._row_type

    @row_type.setter
    def row_type(self, row_type):
        """Sets the row_type of this ReportRows.


        :param row_type: The row_type of this ReportRows.  # noqa: E501
        :type: RowType
        """

        self._row_type = row_type

    @property
    def title(self):
        """Gets the title of this ReportRows.  # noqa: E501


        :return: The title of this ReportRows.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ReportRows.


        :param title: The title of this ReportRows.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def cells(self):
        """Gets the cells of this ReportRows.  # noqa: E501


        :return: The cells of this ReportRows.  # noqa: E501
        :rtype: list[ReportCell]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this ReportRows.


        :param cells: The cells of this ReportRows.  # noqa: E501
        :type: list[ReportCell]
        """

        self._cells = cells

    @property
    def rows(self):
        """Gets the rows of this ReportRows.  # noqa: E501


        :return: The rows of this ReportRows.  # noqa: E501
        :rtype: list[ReportRow]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ReportRows.


        :param rows: The rows of this ReportRows.  # noqa: E501
        :type: list[ReportRow]
        """

        self._rows = rows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReportRows):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
