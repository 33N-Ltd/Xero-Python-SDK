# coding: utf-8

"""
    Accounting API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 2.0.0
    Contact: api@xero.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class HistoryRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'details': 'str',
        'changes': 'str',
        'user': 'str',
        'date_utc': 'datetime'
    }

    attribute_map = {
        'details': 'Details',
        'changes': 'Changes',
        'user': 'User',
        'date_utc': 'DateUTC'
    }

    def __init__(self, details=None, changes=None, user=None, date_utc=None):  # noqa: E501
        """HistoryRecord - a model defined in OpenAPI"""  # noqa: E501

        self._details = None
        self._changes = None
        self._user = None
        self._date_utc = None
        self.discriminator = None

        if details is not None:
            self.details = details
        if changes is not None:
            self.changes = changes
        if user is not None:
            self.user = user
        if date_utc is not None:
            self.date_utc = date_utc

    @property
    def details(self):
        """Gets the details of this HistoryRecord.  # noqa: E501

        details  # noqa: E501

        :return: The details of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this HistoryRecord.

        details  # noqa: E501

        :param details: The details of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def changes(self):
        """Gets the changes of this HistoryRecord.  # noqa: E501

        Name of branding theme  # noqa: E501

        :return: The changes of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this HistoryRecord.

        Name of branding theme  # noqa: E501

        :param changes: The changes of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._changes = changes

    @property
    def user(self):
        """Gets the user of this HistoryRecord.  # noqa: E501

        has a value of 0  # noqa: E501

        :return: The user of this HistoryRecord.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this HistoryRecord.

        has a value of 0  # noqa: E501

        :param user: The user of this HistoryRecord.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def date_utc(self):
        """Gets the date_utc of this HistoryRecord.  # noqa: E501

        UTC timestamp of creation date of branding theme  # noqa: E501

        :return: The date_utc of this HistoryRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._date_utc

    @date_utc.setter
    def date_utc(self, date_utc):
        """Sets the date_utc of this HistoryRecord.

        UTC timestamp of creation date of branding theme  # noqa: E501

        :param date_utc: The date_utc of this HistoryRecord.  # noqa: E501
        :type: datetime
        """

        self._date_utc = date_utc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
